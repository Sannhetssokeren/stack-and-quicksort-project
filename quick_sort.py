def quick_sort(arr):
    """
    Сортирует список методом быстрой сортировки (QuickSort) рекурсивно.

    :param arr: Список для сортировки.
    :return: Новый отсортированный список.
    """
    # ВАЖНО: Это "функциональная" реализация, которая НЕ in-place.
    # Она создает новые списки на каждом шаге рекурсии, что требует дополнительной памяти.
    # Сложность в среднем случае: O(n log n), в худшем: O(n^2).
    # Выбор опорного элемента: берется средний элемент (len(arr) // 2).
    # Это может быть неоптимально для отсортированных или почти отсортированных списков.

    if len(arr) <= 1:  # Базовый случай: пустой список или один элемент
        return arr

    pivot = arr[len(arr) // 2]  # Опорный элемент (pivot)
    left = [x for x in arr if x < pivot]    # Элементы меньше опорного
    middle = [x for x in arr if x == pivot] # Элементы равные опорному
    right = [x for x in arr if x > pivot]   # Элементы больше опорного

    # Рекурсивно сортируем левую и правую части, затем объединяем
    return quick_sort(left) + middle + quick_sort(right)

# Пример использования
if __name__ == "__main__":
    arr = [3, 6, 8, 10, 1, 2, 1]
    print(f"Отсортированный список: {quick_sort(arr)}")
